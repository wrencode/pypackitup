{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pypackitup - Python Package Template \u00b6 Please check out the README to get started!","title":"Introduction"},{"location":"#pypackitup-python-package-template","text":"Please check out the README to get started!","title":"pypackitup - Python Package Template"},{"location":"helloworld/","text":"Hello, World! \u00b6 Module containing Python code for the Python Package Template. This module is an example for the Python Package Template. Attributes: __author__ ( str ) \u2013 Python package template author. __email__ ( str ) \u2013 Python package template author email. Classes: Name Description PythonPackageTemplate Functions: Name Description main Example main function for the Python Package Template. PythonPackageTemplate \u00b6 Bases: object Methods: Name Description __init__ Instantiate the Python Package Template example class. example_method Example method for the Python Package Template. Source code in src/pypackitup/helloworld.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class PythonPackageTemplate ( object ): def __init__ ( self , example_init_parameter : str = \"Hello\" ): \"\"\"Instantiate the Python Package Template example class. Args: example_init_parameter (str): Example class init parameter for the Python Package Template. Attributes: example_init_parameter (str): Example class attribute for the Python Package Template. \"\"\" self . example_init_parameter = example_init_parameter def example_method ( self , example_parameter : str = \"World\" ) -> str : \"\"\"Example method for the Python Package Template. Args: example_parameter (str): Example class method parameter for the Python Package Template. Examples: >>> from pypackitup.helloworld import PythonPackageTemplate >>> example_class_instance = PythonPackageTemplate() >>> print(example_class_instance.example_method()) Hello, World! Returns: str: Example return string for the Python Package Template. \"\"\" if not example_parameter : raise ValueError ( \"Invalid argument provided for example_parameter.\" ) return f \" { self . example_init_parameter } , { example_parameter } !\" __init__ \u00b6 __init__ ( example_init_parameter = 'Hello' ) Instantiate the Python Package Template example class. Parameters: example_init_parameter ( str , default: 'Hello' ) \u2013 Example class init parameter for the Python Package Template. Attributes: example_init_parameter ( str ) \u2013 Example class attribute for the Python Package Template. Source code in src/pypackitup/helloworld.py 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , example_init_parameter : str = \"Hello\" ): \"\"\"Instantiate the Python Package Template example class. Args: example_init_parameter (str): Example class init parameter for the Python Package Template. Attributes: example_init_parameter (str): Example class attribute for the Python Package Template. \"\"\" self . example_init_parameter = example_init_parameter example_method \u00b6 example_method ( example_parameter = 'World' ) Example method for the Python Package Template. Parameters: example_parameter ( str , default: 'World' ) \u2013 Example class method parameter for the Python Package Template. Examples: >>> from pypackitup.helloworld import PythonPackageTemplate >>> example_class_instance = PythonPackageTemplate () >>> print ( example_class_instance . example_method ()) Hello, World! Returns: str ( str ) \u2013 Example return string for the Python Package Template. Source code in src/pypackitup/helloworld.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def example_method ( self , example_parameter : str = \"World\" ) -> str : \"\"\"Example method for the Python Package Template. Args: example_parameter (str): Example class method parameter for the Python Package Template. Examples: >>> from pypackitup.helloworld import PythonPackageTemplate >>> example_class_instance = PythonPackageTemplate() >>> print(example_class_instance.example_method()) Hello, World! Returns: str: Example return string for the Python Package Template. \"\"\" if not example_parameter : raise ValueError ( \"Invalid argument provided for example_parameter.\" ) return f \" { self . example_init_parameter } , { example_parameter } !\" main \u00b6 main () Example main function for the Python Package Template. Returns: None \u2013 None Source code in src/pypackitup/helloworld.py 52 53 54 55 56 57 58 59 60 def main () -> None : \"\"\"Example main function for the Python Package Template. Returns: None \"\"\" example_class_instance = PythonPackageTemplate () print ( example_class_instance . example_method ())","title":"Hello, World"},{"location":"helloworld/#hello-world","text":"Module containing Python code for the Python Package Template. This module is an example for the Python Package Template. Attributes: __author__ ( str ) \u2013 Python package template author. __email__ ( str ) \u2013 Python package template author email. Classes: Name Description PythonPackageTemplate Functions: Name Description main Example main function for the Python Package Template.","title":"Hello, World!"},{"location":"helloworld/#src.pypackitup.helloworld.PythonPackageTemplate","text":"Bases: object Methods: Name Description __init__ Instantiate the Python Package Template example class. example_method Example method for the Python Package Template. Source code in src/pypackitup/helloworld.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class PythonPackageTemplate ( object ): def __init__ ( self , example_init_parameter : str = \"Hello\" ): \"\"\"Instantiate the Python Package Template example class. Args: example_init_parameter (str): Example class init parameter for the Python Package Template. Attributes: example_init_parameter (str): Example class attribute for the Python Package Template. \"\"\" self . example_init_parameter = example_init_parameter def example_method ( self , example_parameter : str = \"World\" ) -> str : \"\"\"Example method for the Python Package Template. Args: example_parameter (str): Example class method parameter for the Python Package Template. Examples: >>> from pypackitup.helloworld import PythonPackageTemplate >>> example_class_instance = PythonPackageTemplate() >>> print(example_class_instance.example_method()) Hello, World! Returns: str: Example return string for the Python Package Template. \"\"\" if not example_parameter : raise ValueError ( \"Invalid argument provided for example_parameter.\" ) return f \" { self . example_init_parameter } , { example_parameter } !\"","title":"PythonPackageTemplate"},{"location":"helloworld/#src.pypackitup.helloworld.PythonPackageTemplate.__init__","text":"__init__ ( example_init_parameter = 'Hello' ) Instantiate the Python Package Template example class. Parameters: example_init_parameter ( str , default: 'Hello' ) \u2013 Example class init parameter for the Python Package Template. Attributes: example_init_parameter ( str ) \u2013 Example class attribute for the Python Package Template. Source code in src/pypackitup/helloworld.py 18 19 20 21 22 23 24 25 26 27 28 def __init__ ( self , example_init_parameter : str = \"Hello\" ): \"\"\"Instantiate the Python Package Template example class. Args: example_init_parameter (str): Example class init parameter for the Python Package Template. Attributes: example_init_parameter (str): Example class attribute for the Python Package Template. \"\"\" self . example_init_parameter = example_init_parameter","title":"__init__"},{"location":"helloworld/#src.pypackitup.helloworld.PythonPackageTemplate.example_method","text":"example_method ( example_parameter = 'World' ) Example method for the Python Package Template. Parameters: example_parameter ( str , default: 'World' ) \u2013 Example class method parameter for the Python Package Template. Examples: >>> from pypackitup.helloworld import PythonPackageTemplate >>> example_class_instance = PythonPackageTemplate () >>> print ( example_class_instance . example_method ()) Hello, World! Returns: str ( str ) \u2013 Example return string for the Python Package Template. Source code in src/pypackitup/helloworld.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def example_method ( self , example_parameter : str = \"World\" ) -> str : \"\"\"Example method for the Python Package Template. Args: example_parameter (str): Example class method parameter for the Python Package Template. Examples: >>> from pypackitup.helloworld import PythonPackageTemplate >>> example_class_instance = PythonPackageTemplate() >>> print(example_class_instance.example_method()) Hello, World! Returns: str: Example return string for the Python Package Template. \"\"\" if not example_parameter : raise ValueError ( \"Invalid argument provided for example_parameter.\" ) return f \" { self . example_init_parameter } , { example_parameter } !\"","title":"example_method"},{"location":"helloworld/#src.pypackitup.helloworld.main","text":"main () Example main function for the Python Package Template. Returns: None \u2013 None Source code in src/pypackitup/helloworld.py 52 53 54 55 56 57 58 59 60 def main () -> None : \"\"\"Example main function for the Python Package Template. Returns: None \"\"\" example_class_instance = PythonPackageTemplate () print ( example_class_instance . example_method ())","title":"main"},{"location":"readme/","text":"pypackitup - Python Package Template \u00b6 Template repository for developing Python packages. Do you like the Python Package Template? Star the repository on GitHub and please consider helping support its ongoing development: READ THE DOCS HERE! Detailed documentation can be found at https://pypackitup.wrencode.dev . Table of Contents \u00b6 About Dependencies Setup Configuration Version Control Documentation Code Deployment About \u00b6 The Python Package Template is an example for Python package development. Dependencies \u00b6 The Python Package Template does not have any third-party dependencies to run the code. It has several development dependencies, which can be seen in the package pyproject.toml . Setup \u00b6 The below list covers all updates needed in the Python Package Template when using it to create a new Python package: Configuration \u00b6 pyproject.toml : Update all relevant fields as needed for the new package. Version Control \u00b6 .gitignore : Add any package-specific files that should not be checked in to version control. .github/ISSUE_TEMPLATE/ : Make any package-specific changes to the project issue templates. .github/workflows/python-package.yml : Update the supported Python versions and add any necessary CI/CD steps. Documentation \u00b6 README.md : Update the README.md with all necessary package documentation. mkdocs.yml : Update the nav section with all necessary pages and their corresponding Markdown files (see below). docs-mkdocs/CNAME : Update the CNAME file with the desired mkdocs documentation GitHub Pages custom domain. docs-mkdocs/extra.css : Add any custom CSS for the mkdocs documentation. docs-mkdocs/extra.js : Add any custom JavaScript for the mkdocs documentation. docs-mkdocs/*.md : Add any necessary Markdown ( .md ) files for pages in the mkdocs documentation. docs-mkdocs/*.svg/*.png/*.jpg/etc. : Add any necessary images for the mkdocs documentation. Code \u00b6 src/pypackitup/ : Rename this directory to match the project directory and follow the PEP naming conventions for the package. src/pypackitup/__init__.py : Update the package __init__.py with available imports. src/pypackitup/*.py : Add package code. tests/ : Add tests for package code. Deployment \u00b6 (Optional) Check pyproject.toml for latest dependency versions. (Optional) Update virtual machine with the latest dependencies ( make update in Makefile): uv sync --all-extras --dev Lint code with ruff ( make lint in Makefile): ruff check . Check code security with bandit ( make secure in Makefile): bandit -c pyproject.toml -r . (Optional) Run all pytest tests (see following commands for running subsets of tests) ( make test_code in Makefile): uv run pytest tests (Optional) Run all pytest tests verbosely : uv run pytest -v -s tests (Optional) Run all tests from pytest file: uv run pytest -v -s tests/test_helloworld.py (Optional) Run specific test from pytest file: uv run pytest -v -s tests/test_helloworld.py -k test_main (Optional) Test Python support using act for GitHub Actions: act -j build Note : If act is unable to locate Docker, make sure that the required /var/run/docker.sock symlink exists. If it does not, you can fix it by running: sudo ln -s \" $HOME /.docker/run/docker.sock\" /var/run/docker.sock ` Note : If you are running macOS on a devices with an M-series chip (Apple Silicon), you will need to specify linux/amd64 architecture when running act : act --container-architecture linux/amd64 -j build (Optional) Build the PyPI package independent of deployment: make build (Optional) Test packages for PyPI deployment: make verify_build (Optional) Check MkDocs documentation by serving it at http://localhost:8000/ locally: make test_docs (Optional) Build the PyPI package and MkDocs documentation independent of deployment: make docs Note : Running make test_docs from the previous step recreates the documentation without building the PyPI package. Create a git commit: git add . git commit -m 'commit message' Update the git tag with the new version ( git tag -a [tag_name/version] -m [message] ): git tag -a v1.0.0 -m 'release message' git push origin --tags (Required for initial publication on PyPI as needed) Register a new account on PyPI (do the same for Test PyPI as needed). (Required for initial publication on PyPI) Configure API token authentication for PyPI by creating an API token (do the same for Test PyPI as needed) and copy the value of the API token. (Required for initial publication on PyPI) Create a .env file by running cp .env.template .env in the command line from the project root directory and paste the PyPI API token from the previous step as the value for UV_PUBLISH_TOKEN (this environment variable is used in the Makefile by uv publish to publish the package using uv ). (Optional after initial package publication on PyPI) Configure a new package-specific PyPI API token and update the above UV_PUBLISH_TOKEN environment variable in the .env to use it. (Optional if using Twine) Install twine (if not already installed): uv add twine (Optional) Test deployment by building the PyPI packages, recreating the documentation, and deploying to Test PyPI: make test_deploy Deploy the package by building it, recreating the documentation, and deploying the package to PyPI: make deploy Create a second git commit with updated version number and documentation: git add . git commit -m 'update version number and docs' Update package git repository: git push","title":"pypackitup"},{"location":"readme/#pypackitup-python-package-template","text":"Template repository for developing Python packages. Do you like the Python Package Template? Star the repository on GitHub and please consider helping support its ongoing development: READ THE DOCS HERE! Detailed documentation can be found at https://pypackitup.wrencode.dev .","title":"pypackitup - Python Package Template"},{"location":"readme/#table-of-contents","text":"About Dependencies Setup Configuration Version Control Documentation Code Deployment","title":"Table of Contents"},{"location":"readme/#about","text":"The Python Package Template is an example for Python package development.","title":"About"},{"location":"readme/#dependencies","text":"The Python Package Template does not have any third-party dependencies to run the code. It has several development dependencies, which can be seen in the package pyproject.toml .","title":"Dependencies"},{"location":"readme/#setup","text":"The below list covers all updates needed in the Python Package Template when using it to create a new Python package:","title":"Setup"},{"location":"readme/#configuration","text":"pyproject.toml : Update all relevant fields as needed for the new package.","title":"Configuration"},{"location":"readme/#version-control","text":".gitignore : Add any package-specific files that should not be checked in to version control. .github/ISSUE_TEMPLATE/ : Make any package-specific changes to the project issue templates. .github/workflows/python-package.yml : Update the supported Python versions and add any necessary CI/CD steps.","title":"Version Control"},{"location":"readme/#documentation","text":"README.md : Update the README.md with all necessary package documentation. mkdocs.yml : Update the nav section with all necessary pages and their corresponding Markdown files (see below). docs-mkdocs/CNAME : Update the CNAME file with the desired mkdocs documentation GitHub Pages custom domain. docs-mkdocs/extra.css : Add any custom CSS for the mkdocs documentation. docs-mkdocs/extra.js : Add any custom JavaScript for the mkdocs documentation. docs-mkdocs/*.md : Add any necessary Markdown ( .md ) files for pages in the mkdocs documentation. docs-mkdocs/*.svg/*.png/*.jpg/etc. : Add any necessary images for the mkdocs documentation.","title":"Documentation"},{"location":"readme/#code","text":"src/pypackitup/ : Rename this directory to match the project directory and follow the PEP naming conventions for the package. src/pypackitup/__init__.py : Update the package __init__.py with available imports. src/pypackitup/*.py : Add package code. tests/ : Add tests for package code.","title":"Code"},{"location":"readme/#deployment","text":"(Optional) Check pyproject.toml for latest dependency versions. (Optional) Update virtual machine with the latest dependencies ( make update in Makefile): uv sync --all-extras --dev Lint code with ruff ( make lint in Makefile): ruff check . Check code security with bandit ( make secure in Makefile): bandit -c pyproject.toml -r . (Optional) Run all pytest tests (see following commands for running subsets of tests) ( make test_code in Makefile): uv run pytest tests (Optional) Run all pytest tests verbosely : uv run pytest -v -s tests (Optional) Run all tests from pytest file: uv run pytest -v -s tests/test_helloworld.py (Optional) Run specific test from pytest file: uv run pytest -v -s tests/test_helloworld.py -k test_main (Optional) Test Python support using act for GitHub Actions: act -j build Note : If act is unable to locate Docker, make sure that the required /var/run/docker.sock symlink exists. If it does not, you can fix it by running: sudo ln -s \" $HOME /.docker/run/docker.sock\" /var/run/docker.sock ` Note : If you are running macOS on a devices with an M-series chip (Apple Silicon), you will need to specify linux/amd64 architecture when running act : act --container-architecture linux/amd64 -j build (Optional) Build the PyPI package independent of deployment: make build (Optional) Test packages for PyPI deployment: make verify_build (Optional) Check MkDocs documentation by serving it at http://localhost:8000/ locally: make test_docs (Optional) Build the PyPI package and MkDocs documentation independent of deployment: make docs Note : Running make test_docs from the previous step recreates the documentation without building the PyPI package. Create a git commit: git add . git commit -m 'commit message' Update the git tag with the new version ( git tag -a [tag_name/version] -m [message] ): git tag -a v1.0.0 -m 'release message' git push origin --tags (Required for initial publication on PyPI as needed) Register a new account on PyPI (do the same for Test PyPI as needed). (Required for initial publication on PyPI) Configure API token authentication for PyPI by creating an API token (do the same for Test PyPI as needed) and copy the value of the API token. (Required for initial publication on PyPI) Create a .env file by running cp .env.template .env in the command line from the project root directory and paste the PyPI API token from the previous step as the value for UV_PUBLISH_TOKEN (this environment variable is used in the Makefile by uv publish to publish the package using uv ). (Optional after initial package publication on PyPI) Configure a new package-specific PyPI API token and update the above UV_PUBLISH_TOKEN environment variable in the .env to use it. (Optional if using Twine) Install twine (if not already installed): uv add twine (Optional) Test deployment by building the PyPI packages, recreating the documentation, and deploying to Test PyPI: make test_deploy Deploy the package by building it, recreating the documentation, and deploying the package to PyPI: make deploy Create a second git commit with updated version number and documentation: git add . git commit -m 'update version number and docs' Update package git repository: git push","title":"Deployment"}]}